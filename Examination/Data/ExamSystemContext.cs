// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Examination.Models;

namespace Examination.Data
{
    public partial class ExamSystemContext : DbContext
    {
        public ExamSystemContext()
        {
        }

        public ExamSystemContext(DbContextOptions<ExamSystemContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Exam_Student> Exam_Students { get; set; }
        public virtual DbSet<choice> choices { get; set; }
        public virtual DbSet<course> courses { get; set; }
        public virtual DbSet<department> departments { get; set; }
        public virtual DbSet<exam> exams { get; set; }
        public virtual DbSet<exams_question> exams_questions { get; set; }
        public virtual DbSet<instructor> instructors { get; set; }
        public virtual DbSet<question> questions { get; set; }
        public virtual DbSet<student> students { get; set; }
        public virtual DbSet<topic> topics { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=ExamSystem;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("Arabic_CI_AS");

            modelBuilder.Entity<Exam_Student>(entity =>
            {
                entity.HasKey(e => new { e.St_ID, e.Exam_ID });

                entity.ToTable("Exam_Student");

                entity.HasOne(d => d.Exam)
                    .WithMany(p => p.Exam_Students)
                    .HasForeignKey(d => d.Exam_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Exam_Student_exams");

                entity.HasOne(d => d.St)
                    .WithMany(p => p.Exam_Students)
                    .HasForeignKey(d => d.St_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Exam_Student_students");
            });

            modelBuilder.Entity<choice>(entity =>
            {
                entity.HasKey(e => e.choice_ID);

                entity.Property(e => e.choice_ID).ValueGeneratedNever();

                entity.Property(e => e.choice_desc)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.isCorrect)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.q_IDNavigation)
                    .WithMany(p => p.choices)
                    .HasForeignKey(d => d.q_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_choices_questions");
            });

            modelBuilder.Entity<course>(entity =>
            {
                entity.HasKey(e => e.c_ID);

                entity.Property(e => e.c_ID).ValueGeneratedNever();

                entity.Property(e => e.c_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<department>(entity =>
            {
                entity.HasKey(e => e.dept_ID);

                entity.ToTable("department");

                entity.Property(e => e.dept_ID).ValueGeneratedNever();

                entity.Property(e => e.dept_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.manager)
                    .WithMany(p => p.departments)
                    .HasForeignKey(d => d.manager_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_department_instructor");
            });

            modelBuilder.Entity<exam>(entity =>
            {
                entity.HasKey(e => e.exam_ID);

                entity.HasOne(d => d.course)
                    .WithMany(p => p.exams)
                    .HasForeignKey(d => d.course_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_exams_courses");
            });

            modelBuilder.Entity<exams_question>(entity =>
            {
                entity.HasKey(e => new { e.exam_ID, e.q_ID, e.St_ID });

                entity.HasOne(d => d.St)
                    .WithMany(p => p.exams_questions)
                    .HasForeignKey(d => d.St_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_exams_questions_students");

                entity.HasOne(d => d.exam)
                    .WithMany(p => p.exams_questions)
                    .HasForeignKey(d => d.exam_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_exams_questions_exams");

                entity.HasOne(d => d.q_IDNavigation)
                    .WithMany(p => p.exams_questions)
                    .HasForeignKey(d => d.q_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_exams_questions_questions");
            });

            modelBuilder.Entity<instructor>(entity =>
            {
                entity.HasKey(e => e.inst_ID);

                entity.ToTable("instructor");

                entity.HasIndex(e => e.inst_username, "IX_instructor")
                    .IsUnique();

                entity.Property(e => e.inst_ID).ValueGeneratedNever();

                entity.Property(e => e.inst_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.inst_pw)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.inst_username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasMany(d => d.courses)
                    .WithMany(p => p.insts)
                    .UsingEntity<Dictionary<string, object>>(
                        "Inst_Course",
                        l => l.HasOne<course>().WithMany().HasForeignKey("course_ID").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Inst_Courses_courses"),
                        r => r.HasOne<instructor>().WithMany().HasForeignKey("inst_ID").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Inst_Courses_instructor"),
                        j =>
                        {
                            j.HasKey("inst_ID", "course_ID");

                            j.ToTable("Inst_Courses");
                        });
            });

            modelBuilder.Entity<question>(entity =>
            {
                entity.HasKey(e => e.q_ID);

                entity.Property(e => e.q_ID).ValueGeneratedNever();

                entity.Property(e => e.q_desc)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.q_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.c_IDNavigation)
                    .WithMany(p => p.questions)
                    .HasForeignKey(d => d.c_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_questions_courses");
            });

            modelBuilder.Entity<student>(entity =>
            {
                entity.HasKey(e => e.stud_ID);

                entity.HasIndex(e => e.stud_Username, "IX_students")
                    .IsUnique();

                entity.Property(e => e.stud_ID).ValueGeneratedNever();

                entity.Property(e => e.stud_Fname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.stud_Lname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.stud_Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.stud_pw)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.dept)
                    .WithMany(p => p.students)
                    .HasForeignKey(d => d.dept_ID)
                    .HasConstraintName("FK_students_department");

                entity.HasMany(d => d.courses)
                    .WithMany(p => p.studs)
                    .UsingEntity<Dictionary<string, object>>(
                        "stud_course",
                        l => l.HasOne<course>().WithMany().HasForeignKey("course_ID").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_stud_courses_courses"),
                        r => r.HasOne<student>().WithMany().HasForeignKey("stud_ID").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_stud_courses_students"),
                        j =>
                        {
                            j.HasKey("stud_ID", "course_ID");

                            j.ToTable("stud_courses");
                        });
            });

            modelBuilder.Entity<topic>(entity =>
            {
                entity.HasKey(e => e.topic_ID);

                entity.Property(e => e.topic_ID).ValueGeneratedNever();

                entity.Property(e => e.topic_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.course)
                    .WithMany(p => p.topics)
                    .HasForeignKey(d => d.course_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_topics_courses");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}